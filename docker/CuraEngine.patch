diff --git a/CMakeLists.txt b/CMakeLists.txt
index 0b1bdeacf..0448a5d35 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -97,7 +97,7 @@ if (ENABLE_MORE_COMPILER_OPTIMIZATION_FLAGS AND NOT (CMAKE_BUILD_TYPE_UPPER MATC
     if (MSVC)
         set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS} /fp:fast")
     else()
-        set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS} -Ofast -funroll-loops")
+        set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS} -funroll-loops")
     endif()
 endif ()
 
diff --git a/src/communication/CommandLine.cpp b/src/communication/CommandLine.cpp
index e05aebf3e..631e032b7 100644
--- a/src/communication/CommandLine.cpp
+++ b/src/communication/CommandLine.cpp
@@ -22,6 +22,8 @@
 #include "../utils/FMatrix4x3.h" //For the mesh_rotation_matrix setting.
 #include "../utils/logoutput.h"
 
+#include <emscripten.h>
+
 namespace cura
 {
 
@@ -80,6 +82,11 @@ void CommandLine::sendProgress(const float& progress) const
         return;
     }
     //TODO: Do we want to print a progress bar? We'd need a better solution to not have that progress bar be ruined by any logging.
+
+    //Call progress handler with progress
+    char js[100];
+    std::sprintf(js, "globalThis[\"%s\"](%f)", progressHandler.c_str(), progress);
+    emscripten_run_script(js);
 }
 
 void CommandLine::sliceNext()
@@ -132,6 +139,13 @@ void CommandLine::sliceNext()
                         exit(1);
                     }
                 }
+                else if (argument.find("--progress") == 0)
+                {
+                    //Store progress handler name
+                    argument_index++;
+                    argument = arguments[argument_index];
+                    progressHandler = argument;
+                }
                 else
                 {
                     logError("Unknown option: %s\n", argument.c_str());
diff --git a/src/communication/CommandLine.h b/src/communication/CommandLine.h
index 341ba6d65..41a71382c 100644
--- a/src/communication/CommandLine.h
+++ b/src/communication/CommandLine.h
@@ -145,6 +145,12 @@ public:
     void sliceNext() override;
 
 private:
+    /*
+     * \brief The name of the progress handler to call on each progrss event
+     * relative to the globalThis context within the worker.
+     */
+    std::string progressHandler;
+
     /*
      * \brief The command line arguments that the application was called with.
      */
